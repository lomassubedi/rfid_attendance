void parseTag(uint8_t *rawBuffr, uint8_t *IDBuffr) {
  
      uint8_t dataBuffr[12];
      uint8_t indx i, j;
      
      memcpy(dataBuffr, &rawBuffr[1], 12);
      
    for(; indx < 12; indx += 2, j++) {
      
      uint8_t tmpMSB, tmpLSB;
      
      tmpMSB = dataBuffr[indx];
  
      tmpLSB = dataBuffr[indx + 1];
      
      if(tmpMSB > 0x39) tmpMSB = ((10 + tmpMSB) - 0x41);
      else tmpMSB = tmpMSB - 0x30;
      
      if(tmpLSB > 0x39) tmpLSB = ((10 + tmpLSB) - 0x41);
      else tmpLSB = tmpLSB - 0x30;
      
      IDBuffr[j] = (tmpMSB << 4 + tmpLSB); //dataBuffr[indx]
    }      

    Serial.println((const char *)IDBuffr);
}

bool validateCheckSum(uint8_t *IDBuffr) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 5; i++) {
      sum += IDBuffr[i];
    }

    if(sum == IDBuffr[6]) return true;
    else return false;
}

uint32_t getTag(uint8_t *IDBuffr) {
  return (IDBuffr[1] << 24 + IDBuffr[2] << 16 + IDBuffr[3] << 8 + IDBuffr[4]);
}

void setup() {
  Serial.begin(9600);
}

uint8_t readBuffr[20];
//uint8_t dataBuffr[12]
uint8_t tagBuffr[6];

void loop() {

  uint8_t getChar = Serial.read();
  uint8_t i = 0;
  bool flagPacketReadComplete = false;
  
  if(getChar == 0x02) {       
    Serial.flush();
    readBuffr[i++] = getChar;    
    while(Serial.available() > 0) {    
      getChar = Serial.read();
      readBuffr[i++] = getChar;
      Serial.flush();
      if(getChar == 0x03) {
        flagPacketReadComplete = true;
        break;
      } else {
        flagPacketReadComplete = false;
      }
    }
  }
  
  if(flagPacketReadComplete) {
    
    Serial.println((const char *)readBuffr);
    
    parseTag(readBuffr, tagBuffr);    
    
    char buffr[100];
    sprintf(buffr, "%d\t%d\t%d\t%d\t%d\t%d", tagBuffr[0], tagBuffr[1], tagBuffr[2], tagBuffr[3], tagBuffr[4], tagBuffr[5]);
    
//    Serial.println((const char *)buffr);
    
    memset(readBuffr, 0, 20); 
  }
}


